{"ast":null,"code":"function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport { Parser } from \"../Parser.js\";\nimport { parseNDigits, normalizeTwoDigitYear, mapValue } from \"../utils.js\";\nimport getUTCWeekYear from \"../../../_lib/getUTCWeekYear/index.js\";\nimport startOfUTCWeek from \"../../../_lib/startOfUTCWeek/index.js\"; // Local week-numbering year\n\nexport class LocalWeekYearParser extends Parser {\n  constructor() {\n    super(...arguments);\n\n    _defineProperty(this, \"priority\", 130);\n\n    _defineProperty(this, \"incompatibleTokens\", ['y', 'R', 'u', 'Q', 'q', 'M', 'L', 'I', 'd', 'D', 'i', 't', 'T']);\n  }\n\n  parse(dateString, token, match) {\n    var valueCallback = function (year) {\n      return {\n        year: year,\n        isTwoDigitYear: token === 'YY'\n      };\n    };\n\n    switch (token) {\n      case 'Y':\n        return mapValue(parseNDigits(4, dateString), valueCallback);\n\n      case 'Yo':\n        return mapValue(match.ordinalNumber(dateString, {\n          unit: 'year'\n        }), valueCallback);\n\n      default:\n        return mapValue(parseNDigits(token.length, dateString), valueCallback);\n    }\n  }\n\n  validate(_date, value) {\n    return value.isTwoDigitYear || value.year > 0;\n  }\n\n  set(date, flags, value, options) {\n    var currentYear = getUTCWeekYear(date, options);\n\n    if (value.isTwoDigitYear) {\n      var normalizedTwoDigitYear = normalizeTwoDigitYear(value.year, currentYear);\n      date.setUTCFullYear(normalizedTwoDigitYear, 0, options.firstWeekContainsDate);\n      date.setUTCHours(0, 0, 0, 0);\n      return startOfUTCWeek(date, options);\n    }\n\n    var year = !('era' in flags) || flags.era === 1 ? value.year : 1 - value.year;\n    date.setUTCFullYear(year, 0, options.firstWeekContainsDate);\n    date.setUTCHours(0, 0, 0, 0);\n    return startOfUTCWeek(date, options);\n  }\n\n}","map":{"version":3,"sources":["F:/IET/IET PROJECT/PROJECT WORK/CDacProject/react pages/BookMyMaid/node_modules/date-fns/esm/parse/_lib/parsers/LocalWeekYearParser.js"],"names":["_defineProperty","obj","key","value","Object","defineProperty","enumerable","configurable","writable","Parser","parseNDigits","normalizeTwoDigitYear","mapValue","getUTCWeekYear","startOfUTCWeek","LocalWeekYearParser","constructor","arguments","parse","dateString","token","match","valueCallback","year","isTwoDigitYear","ordinalNumber","unit","length","validate","_date","set","date","flags","options","currentYear","normalizedTwoDigitYear","setUTCFullYear","firstWeekContainsDate","setUTCHours","era"],"mappings":"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","sourcesContent":["function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { Parser } from \"../Parser.js\";\nimport { parseNDigits, normalizeTwoDigitYear, mapValue } from \"../utils.js\";\nimport getUTCWeekYear from \"../../../_lib/getUTCWeekYear/index.js\";\nimport startOfUTCWeek from \"../../../_lib/startOfUTCWeek/index.js\";\n// Local week-numbering year\nexport class LocalWeekYearParser extends Parser {\n  constructor() {\n    super(...arguments);\n\n    _defineProperty(this, \"priority\", 130);\n\n    _defineProperty(this, \"incompatibleTokens\", ['y', 'R', 'u', 'Q', 'q', 'M', 'L', 'I', 'd', 'D', 'i', 't', 'T']);\n  }\n\n  parse(dateString, token, match) {\n    var valueCallback = function (year) {\n      return {\n        year: year,\n        isTwoDigitYear: token === 'YY'\n      };\n    };\n\n    switch (token) {\n      case 'Y':\n        return mapValue(parseNDigits(4, dateString), valueCallback);\n\n      case 'Yo':\n        return mapValue(match.ordinalNumber(dateString, {\n          unit: 'year'\n        }), valueCallback);\n\n      default:\n        return mapValue(parseNDigits(token.length, dateString), valueCallback);\n    }\n  }\n\n  validate(_date, value) {\n    return value.isTwoDigitYear || value.year > 0;\n  }\n\n  set(date, flags, value, options) {\n    var currentYear = getUTCWeekYear(date, options);\n\n    if (value.isTwoDigitYear) {\n      var normalizedTwoDigitYear = normalizeTwoDigitYear(value.year, currentYear);\n      date.setUTCFullYear(normalizedTwoDigitYear, 0, options.firstWeekContainsDate);\n      date.setUTCHours(0, 0, 0, 0);\n      return startOfUTCWeek(date, options);\n    }\n\n    var year = !('era' in flags) || flags.era === 1 ? value.year : 1 - value.year;\n    date.setUTCFullYear(year, 0, options.firstWeekContainsDate);\n    date.setUTCHours(0, 0, 0, 0);\n    return startOfUTCWeek(date, options);\n  }\n\n}"]},"metadata":{},"sourceType":"module"}