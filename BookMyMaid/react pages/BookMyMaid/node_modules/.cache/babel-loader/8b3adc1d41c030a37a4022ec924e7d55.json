{"ast":null,"code":"function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport { Parser } from \"../Parser.js\";\nimport { dayPeriodEnumToHours } from \"../utils.js\";\nexport class AMPMMidnightParser extends Parser {\n  constructor() {\n    super(...arguments);\n\n    _defineProperty(this, \"priority\", 80);\n\n    _defineProperty(this, \"incompatibleTokens\", ['a', 'B', 'H', 'k', 't', 'T']);\n  }\n\n  parse(dateString, token, match) {\n    switch (token) {\n      case 'b':\n      case 'bb':\n      case 'bbb':\n        return match.dayPeriod(dateString, {\n          width: 'abbreviated',\n          context: 'formatting'\n        }) || match.dayPeriod(dateString, {\n          width: 'narrow',\n          context: 'formatting'\n        });\n\n      case 'bbbbb':\n        return match.dayPeriod(dateString, {\n          width: 'narrow',\n          context: 'formatting'\n        });\n\n      case 'bbbb':\n      default:\n        return match.dayPeriod(dateString, {\n          width: 'wide',\n          context: 'formatting'\n        }) || match.dayPeriod(dateString, {\n          width: 'abbreviated',\n          context: 'formatting'\n        }) || match.dayPeriod(dateString, {\n          width: 'narrow',\n          context: 'formatting'\n        });\n    }\n  }\n\n  set(date, _flags, value) {\n    date.setUTCHours(dayPeriodEnumToHours(value), 0, 0, 0);\n    return date;\n  }\n\n}","map":{"version":3,"sources":["F:/IET/IET PROJECT/20/react pages/BookMyMaid/node_modules/date-fns/esm/parse/_lib/parsers/AMPMMidnightParser.js"],"names":["_defineProperty","obj","key","value","Object","defineProperty","enumerable","configurable","writable","Parser","dayPeriodEnumToHours","AMPMMidnightParser","constructor","arguments","parse","dateString","token","match","dayPeriod","width","context","set","date","_flags","setUTCHours"],"mappings":"AAAA,SAASA,eAAT,CAAyBC,GAAzB,EAA8BC,GAA9B,EAAmCC,KAAnC,EAA0C;AAAE,MAAID,GAAG,IAAID,GAAX,EAAgB;AAAEG,IAAAA,MAAM,CAACC,cAAP,CAAsBJ,GAAtB,EAA2BC,GAA3B,EAAgC;AAAEC,MAAAA,KAAK,EAAEA,KAAT;AAAgBG,MAAAA,UAAU,EAAE,IAA5B;AAAkCC,MAAAA,YAAY,EAAE,IAAhD;AAAsDC,MAAAA,QAAQ,EAAE;AAAhE,KAAhC;AAA0G,GAA5H,MAAkI;AAAEP,IAAAA,GAAG,CAACC,GAAD,CAAH,GAAWC,KAAX;AAAmB;;AAAC,SAAOF,GAAP;AAAa;;AAEjN,SAASQ,MAAT,QAAuB,cAAvB;AACA,SAASC,oBAAT,QAAqC,aAArC;AACA,OAAO,MAAMC,kBAAN,SAAiCF,MAAjC,CAAwC;AAC7CG,EAAAA,WAAW,GAAG;AACZ,UAAM,GAAGC,SAAT;;AAEAb,IAAAA,eAAe,CAAC,IAAD,EAAO,UAAP,EAAmB,EAAnB,CAAf;;AAEAA,IAAAA,eAAe,CAAC,IAAD,EAAO,oBAAP,EAA6B,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgB,GAAhB,EAAqB,GAArB,EAA0B,GAA1B,CAA7B,CAAf;AACD;;AAEDc,EAAAA,KAAK,CAACC,UAAD,EAAaC,KAAb,EAAoBC,KAApB,EAA2B;AAC9B,YAAQD,KAAR;AACE,WAAK,GAAL;AACA,WAAK,IAAL;AACA,WAAK,KAAL;AACE,eAAOC,KAAK,CAACC,SAAN,CAAgBH,UAAhB,EAA4B;AACjCI,UAAAA,KAAK,EAAE,aAD0B;AAEjCC,UAAAA,OAAO,EAAE;AAFwB,SAA5B,KAGDH,KAAK,CAACC,SAAN,CAAgBH,UAAhB,EAA4B;AAChCI,UAAAA,KAAK,EAAE,QADyB;AAEhCC,UAAAA,OAAO,EAAE;AAFuB,SAA5B,CAHN;;AAQF,WAAK,OAAL;AACE,eAAOH,KAAK,CAACC,SAAN,CAAgBH,UAAhB,EAA4B;AACjCI,UAAAA,KAAK,EAAE,QAD0B;AAEjCC,UAAAA,OAAO,EAAE;AAFwB,SAA5B,CAAP;;AAKF,WAAK,MAAL;AACA;AACE,eAAOH,KAAK,CAACC,SAAN,CAAgBH,UAAhB,EAA4B;AACjCI,UAAAA,KAAK,EAAE,MAD0B;AAEjCC,UAAAA,OAAO,EAAE;AAFwB,SAA5B,KAGDH,KAAK,CAACC,SAAN,CAAgBH,UAAhB,EAA4B;AAChCI,UAAAA,KAAK,EAAE,aADyB;AAEhCC,UAAAA,OAAO,EAAE;AAFuB,SAA5B,CAHC,IAMDH,KAAK,CAACC,SAAN,CAAgBH,UAAhB,EAA4B;AAChCI,UAAAA,KAAK,EAAE,QADyB;AAEhCC,UAAAA,OAAO,EAAE;AAFuB,SAA5B,CANN;AApBJ;AA+BD;;AAEDC,EAAAA,GAAG,CAACC,IAAD,EAAOC,MAAP,EAAepB,KAAf,EAAsB;AACvBmB,IAAAA,IAAI,CAACE,WAAL,CAAiBd,oBAAoB,CAACP,KAAD,CAArC,EAA8C,CAA9C,EAAiD,CAAjD,EAAoD,CAApD;AACA,WAAOmB,IAAP;AACD;;AA9C4C","sourcesContent":["function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { Parser } from \"../Parser.js\";\nimport { dayPeriodEnumToHours } from \"../utils.js\";\nexport class AMPMMidnightParser extends Parser {\n  constructor() {\n    super(...arguments);\n\n    _defineProperty(this, \"priority\", 80);\n\n    _defineProperty(this, \"incompatibleTokens\", ['a', 'B', 'H', 'k', 't', 'T']);\n  }\n\n  parse(dateString, token, match) {\n    switch (token) {\n      case 'b':\n      case 'bb':\n      case 'bbb':\n        return match.dayPeriod(dateString, {\n          width: 'abbreviated',\n          context: 'formatting'\n        }) || match.dayPeriod(dateString, {\n          width: 'narrow',\n          context: 'formatting'\n        });\n\n      case 'bbbbb':\n        return match.dayPeriod(dateString, {\n          width: 'narrow',\n          context: 'formatting'\n        });\n\n      case 'bbbb':\n      default:\n        return match.dayPeriod(dateString, {\n          width: 'wide',\n          context: 'formatting'\n        }) || match.dayPeriod(dateString, {\n          width: 'abbreviated',\n          context: 'formatting'\n        }) || match.dayPeriod(dateString, {\n          width: 'narrow',\n          context: 'formatting'\n        });\n    }\n  }\n\n  set(date, _flags, value) {\n    date.setUTCHours(dayPeriodEnumToHours(value), 0, 0, 0);\n    return date;\n  }\n\n}"]},"metadata":{},"sourceType":"module"}